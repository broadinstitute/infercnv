% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inferCNV_allele_BayesNet.R
\name{inferCNVAlleleBayesNet}
\alias{inferCNVAlleleBayesNet}
\title{inferCNVAlleleBayesNet: Run Bayesian Network Mixture Model Leveraging Allele Data 
To Obtain Posterior Probabilities For HMM Predicted States}
\usage{
inferCNVAlleleBayesNet(
  file_path,
  file_token,
  infercnv_allele_obj,
  allele_mode = c("snp_level", "gene_level"),
  output_path,
  cores = 1
)
}
\arguments{
\item{file_path}{Location of the directory of the inferCNV_allele outputs.}

\item{file_token}{(string) String token that contains some info on settings used to name allele-based files.}

\item{infercnv_allele_obj}{InferCNV_allele object.}

\item{allele_mode}{The type of allele data provided. "snp_level" or "gene_level".}

\item{output_path}{(string) Path to where the output file should be saved to.}

\item{cores}{Option to run parallel by specifying the number of cores to be used. (Default: 5)}
}
\value{
Returns a MCMC_inferCNV_allele_obj and posterior probability of being in one of two Copy Number Variation states
(i2 states: 1,Deletion; 2,Neutral) for CNV's identified by inferCNV_allele's HMM.
}
\description{
Uses Markov Chain Monte Carlo (MCMC) and Gibbs sampling to estimate the posterior
probability of being in one of two Copy Number Variation states 
(i2 states: 1,Deletion; 2,Neutral) for CNV's identified by inferCNV_allele's HMM. 
Posterior probabilities are found for the entire CNV cluster and each individual cell line in the CNV.
}
\examples{
data(infercnv_object_allele_example)
data(infercnv_object_allele_gene_example)

out_dir <- tempfile()
dir.create(out_dir)
file_snp_token <- "HMM_snp_pred"
file_snp_path <- "bayesian_snp_folder"
file_gene_token <- "HMM_gene_pred"
file_gene_path <- "bayesian_gene_folder"

hmm_allele_obj_HMM_samples <- infercnv:::allele_HMM_predict_CNV_via_HMM_on_whole_tumor_samples(infercnv_object_allele_example,
                                                                                               trim = 0)
hmm_allele_gene_obj_HMM_samples <- infercnv:::allele_HMM_predict_CNV_via_HMM_on_whole_tumor_samples(infercnv_object_allele_gene_example,
                                                                                                    trim = 0)
                                                                                                                                                                                                   
infercnv:::generate_cnv_region_reports(hmm_allele_obj_HMM_samples, 
                                       output_filename_prefix=file_snp_token,
                                       out_dir=out_dir,
                                       ignore_neutral_state = 2,
                                       by="subcluster")
infercnv:::generate_cnv_region_reports(hmm_allele_gene_obj_HMM_samples, 
                                       output_filename_prefix=file_gene_token,
                                       out_dir=out_dir,
                                       ignore_neutral_state = 2,
                                       by="subcluster")
                                       
mcmc_allele_snp <- infercnv::inferCNVAlleleBayesNet(file_path = out_dir,
                                                    file_token = file_snp_token,
                                                    infercnv_allele_obj = infercnv_object_allele_example,
                                                    allele_mode = "snp_level",
                                                    output_path = file.path(out_dir, file_snp_path), 
                                                    cores = 1)                                       
mcmc_allele_gene <- infercnv::inferCNVAlleleBayesNet(file_path = out_dir,
                                                     file_token = file_gene_token,
                                                     infercnv_allele_obj = infercnv_object_allele_gene_example,
                                                     allele_mode = "gene_level",
                                                     output_path = file.path(out_dir, file_gene_path), 
                                                     cores = 1) 
}
